//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_project/Inputs/MainInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInput"",
    ""maps"": [
        {
            ""name"": ""Spirit Player Actions"",
            ""id"": ""9000933f-82ba-4105-bb44-b025c89dc051"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""ca6653b8-92e2-447e-9c4f-4dcca77c6a3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""757a995d-004f-4808-a216-916da4486eb2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StableFloat"",
                    ""type"": ""Button"",
                    ""id"": ""f3801d69-8837-4554-9b40-85cb4ad0c0db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e63b3052-c1c4-4e17-9854-2271f5a6f499"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d999b2b4-4cb1-4396-9f9e-d8ab999cf194"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e17d3470-2f98-42f9-a855-a7f5a8a8be7e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e491ddca-3aeb-4dac-bb34-eb3f12cd9af3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""37fe946f-a402-49e5-819c-3506db6e2a7d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""304831de-d566-4cbb-8388-4252fa6994c3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""770fa1ca-5984-4159-8f4b-8e32e9d674d7"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StableFloat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Spirit Player Actions
        m_SpiritPlayerActions = asset.FindActionMap("Spirit Player Actions", throwIfNotFound: true);
        m_SpiritPlayerActions_Escape = m_SpiritPlayerActions.FindAction("Escape", throwIfNotFound: true);
        m_SpiritPlayerActions_Move = m_SpiritPlayerActions.FindAction("Move", throwIfNotFound: true);
        m_SpiritPlayerActions_StableFloat = m_SpiritPlayerActions.FindAction("StableFloat", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Spirit Player Actions
    private readonly InputActionMap m_SpiritPlayerActions;
    private List<ISpiritPlayerActionsActions> m_SpiritPlayerActionsActionsCallbackInterfaces = new List<ISpiritPlayerActionsActions>();
    private readonly InputAction m_SpiritPlayerActions_Escape;
    private readonly InputAction m_SpiritPlayerActions_Move;
    private readonly InputAction m_SpiritPlayerActions_StableFloat;
    public struct SpiritPlayerActionsActions
    {
        private @MainInput m_Wrapper;
        public SpiritPlayerActionsActions(@MainInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_SpiritPlayerActions_Escape;
        public InputAction @Move => m_Wrapper.m_SpiritPlayerActions_Move;
        public InputAction @StableFloat => m_Wrapper.m_SpiritPlayerActions_StableFloat;
        public InputActionMap Get() { return m_Wrapper.m_SpiritPlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpiritPlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(ISpiritPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_SpiritPlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpiritPlayerActionsActionsCallbackInterfaces.Add(instance);
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @StableFloat.started += instance.OnStableFloat;
            @StableFloat.performed += instance.OnStableFloat;
            @StableFloat.canceled += instance.OnStableFloat;
        }

        private void UnregisterCallbacks(ISpiritPlayerActionsActions instance)
        {
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @StableFloat.started -= instance.OnStableFloat;
            @StableFloat.performed -= instance.OnStableFloat;
            @StableFloat.canceled -= instance.OnStableFloat;
        }

        public void RemoveCallbacks(ISpiritPlayerActionsActions instance)
        {
            if (m_Wrapper.m_SpiritPlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpiritPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_SpiritPlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpiritPlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpiritPlayerActionsActions @SpiritPlayerActions => new SpiritPlayerActionsActions(this);
    public interface ISpiritPlayerActionsActions
    {
        void OnEscape(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnStableFloat(InputAction.CallbackContext context);
    }
}
